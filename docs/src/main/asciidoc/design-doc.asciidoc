= Wildfly Provisioning Design Doc
:Author:    Stuart Douglas
:Email:     <sdouglas@redhat.com>
:Date:      2016
:Revision:  1.0
:toc:   left


== Overview

This document covers the design of the Wildfly Provisioning System. This system has the following goals:

== Terminology
Installation::
An instance of provisioned software on the file system.

Feature Pack::
A collection of packages, metadata. Automatic installation of packages when added, using specified default groups. Dependencies can be placed on other feature packs, and package overrides are allowed. Package names are namespaced to the feature pack, unless a namespace is explicitly specified. Packs are versioned and identified by a maven GAV. Possibly needs a new name.

History::
A record of previous server states, which can be used to revert the server to a previous state (atomically).

One-off Feature Pack::
A feature pack which is applicable to an explicit version of a base feature pack. Once the base feature pack is updated to a newer version the one-off feature pack is archived in the history and its specification is no longer effective in the current installation.

Fat Feature Pack::
A feature pack which includes all artifacts necessary to provision the server. (Might instead just require a local maven repo, that we provide as a zip)

Default Group(s)::
A list of groups that should be provisioned when the feature pack is added to the installation, unless the provisioning file has explicitly specified the groups to provision. In other words, the defaults are ignored when a provisioning file specifies a set of groups to provision.

Universe Artifact::
An artifact with a list of known feature packs, with additional metadata necessary for discovery. Also located by a maven GAV.

Server State::
Represents the current provisioned state of the installation.

Provisioning File::
A configuration specifying the desired state of installation. Lists the feature-packs to be installed, and other configuration such as exclusions, group selection, custom overides, and extra tasks. Can be used as a repeatable provisioning description (can be ran on other systems to produce the same exact installation)

Package::
a named set of files, metadata, scripted actions (CLI commands), dependencies on other packages. Elements potentially remotely referenceable.
 * Files must not conflict with files from other installed packages.
 * Dynamic base locations for each file
 * Minimal atomic unit
 * Mappable to an RPM
 * Example Mapping
  - Every extension a package (e.g ee, ejb, undertow, weld javamail, hibernate-search)
  - Close to 1:1 module - package (who owns module.xml)

Group::
A logical name which maps to a set of packages or groups (modeled itself as a special package)
     * ee-full (undertow-subsystem, jberet, â€¦)
     * clustering (infinispan, jgroups, mod_cluster)
     * ee-full-ha (ee-full, clustering)
     * legacy (sar, mc, ..)

== Requirements

=== Hard Requirements

Not EAP/Wildfly specific::
This tool should be usable in products that are not based on Wildfly Core. Any Wildfly specific functionality should be
implemented as a plugin. Even though this document will generally talk in terms of provisioning or updating a server in
practice this could apply to any piece of software, both Java and native.

Provision a server::
If a user has a copy of the provisioning tool on their machine they should be able to use this to provision a new server
instance in a directory they specify.

Multiple FS locations::
It should be possible to provision multiple instances of a server to different file system locations. These servers may
be different versions and have different configuration.

Repeatable provisioning::
It should be possible to describe exactly what is being provisioned in an XML file, which can then be used to provision
the same thing again. Even after applying updates/patches it should be possible to re-provision a server with the same
patch state elsewhere. This requirement is important for cloud scenarios, as it will allow for the quick provisioning of
the same server on multiple nodes.

Package provided config update::
It must be possible for packages to update configuration through the use of post processing tasks. These tasks will be
pluggable, and Wildfly will provide a way for packages to update configuration. For example if a user installs the
Keycloak feature pack then it should be possible to have it automatically added to the servers subsystem config.

User provided config update::
The end user should be able to update configuration as part of the configuration process, including adding deployments
and modifying the server config. This would allow a server provisioning file to represent a complete service, complete
with deployments and any other config that is needed such as datasources etc.

Install additional capabilities on an existing server::
It should be possible to add additional functionality to an existing server.

Remove capabilities from an existing server::
It should be possible to remove installed functionality from an existing server.

Offline + Online::
This must be usable in an offline environment with no internet connection.

Staged patching::
It must be possible to stage patches while a server is running, so they can be applied on server start. This is a Wildfly
specific requirement.

Existing build capabilities::
It must meet the needs of the build process for Wildfly Core, Wildfly and Swarm that are currently provided by the
existing feature pack system.

Easily patch product + community (all capabilities)::
It must be possible to patch software that is managed by the provisioning tool.

Keep a history of all changes::
The provisioning tool must keep a full history and allow the server to be rolled back to any previous state.

User created streams::
A end users should be able to create their own streams and install them on a server instance.

Layered products can provide independent streams::
Layered products can provide their own update stream that can be updated independently of the base version.

Layered products can override Wildfly::
It should be possible for a layered product to modify and override the base installation.

Layered products can be uninstalled::
It should be possible to remove a layered product and go back to the base installation.

Installation diff::
It should be possible to view any modification that have been made to the provisioned server.

Detailed installation info::
It must be possible to get a detailed report on exactly what features are installed, including the current version of
all features.

Zip overlay support::
It must be possible to install a layered product using an overlay zip, that is extracted over an existing installation.

Current FS::
TODO: I can't remember what this requirement actually means

Isolated stream MD files::
Stream metadata should be independent.

=== Optional Requirements

RPM Support::
It should be possible to easily turn packages into RPM files.

=== Non Requirements

Multi host patching::
Domain mode 'pull' based patching is not a requirement.

Invalidate Jars::
Jar invalidation by corrupting old versions of jars is not a requirement.

Migration::
This is not a migration tool, migration will be handled by our existing migration tooling.

Runtime patching::
It is not a requirement for a server to be updated while it is still running.


== Example Usage

.Add a universe
----
pm universe add org.jboss.universe:universe
----

(this universe is installed by default, but this command can install other universes. The list of available universes is maintained in a hidden file in the user's home dir)

.Work with the universe
----
`pm universe list <optional id>`
pm search eap

>org.jboss:eap-7.1 dependency core-2.2
>org.jboss:eap-7.2
>org.jboss:eap-7.3
----

.Install some packages
----
pm install --update eap-7.1 myeap-7.1 # Grab 7.1.1.GA (latest) core (latest)
pm install eap-7.1 myeap-7.1 # Grab 7.1.1.GA (latest) core (original)

pm install eap-7.1 --version 7.1.0.GA myeap-7.1 # Grab 7.1.0.GA core (original)

pm install eap-7.1 --update --version 7.1.0.GA myeap-7.1 # Grab 7.1.0.GA core (latet)
----

.Update an installation
----
cd myeap-7.1

pm update --stage # Updates provisioning file, no server modifications on all streams
pm apply # Perhaps server modifications specified in file
pm unstage # restore the provisioning file to the last log entry

pm update core [--stage]# only update core feature-pack
pm update eap-7.1 [--stage]#  update core and eap (dependency)
pm update --exclusive eap-7.1 # update eap only

pm log # displays update log
pm restore <change-id> # changes provisioning file to that in change id, without resetting history
pm reset <change-id> # changes provisioning file to that change in id, and deletes all history after id

pm update core --version 1.1.0.Final
----


.Modify the installed groups and packages
----
pm group list # display all groups
pm group add extra-stuff # adds extra-stuff to provisioning file, and installs files
pm group remove extra-stuff

pm package list
pm package remove --dependents low-level-package
pm package add extra-package # depends on low-level-package
pm package add low-level-package
----

.Add a new feature pack to an existing installation
----
pm install weld-experimental
pm uninstall weld-experimental
----

----
# Remove all packages installed in the eap-7.1 feature pack, and install original packages that were overridden,
pm uninstall eap-7.1

pm report

pm create-docker-image /images/F21.img
pm depoy-openshift
----
