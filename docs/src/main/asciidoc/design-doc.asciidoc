= Wildfly Provisioning Design Doc
:Author:    Stuart Douglas
:Email:     <sdouglas@redhat.com>
:Date:      2016
:Revision:  1.0
:toc:   left


== Introduction

This document covers the design of the Wildfly Provisioning System. This provisioning system will allow Wildfly servers to be
provisioned modified and updated, including installing additional functionality (e.g. adding Keycloak) and patching.

== Requirements

=== Hard Requirements

Not EAP/Wildfly specific::
This tool should be usable in products that are not based on Wildfly Core. Any Wildfly specific functionality should be
implemented as a plugin. Even though this document will generally talk in terms of provisioning or updating a server in
practice this could apply to any piece of software, both Java and native.

Provision a server::
If a user has a copy of the provisioning tool on their machine they should be able to use this to provision a new server
instance in a directory they specify.

Multiple FS locations::
It should be possible to provision multiple instances of a server to different file system locations. These servers may
be different versions and have different configuration.

Repeatable provisioning::
It should be possible to describe exactly what is being provisioned in an XML file, which can then be used to provision
the same thing again. Even after applying updates/patches it should be possible to re-provision a server with the same
patch state elsewhere. This requirement is important for cloud scenarios, as it will allow for the quick provisioning of
the same server on multiple nodes.

Package provided config update::
It must be possible for packages to update configuration through the use of post processing tasks. These tasks will be
pluggable, and Wildfly will provide a way for packages to update configuration. For example if a user installs the
Keycloak feature pack then it should be possible to have it automatically added to the servers subsystem config.

User provided config update::
The end user should be able to update configuration as part of the configuration process, including adding deployments
and modifying the server config. This would allow a server provisioning file to represent a complete service, complete
with deployments and any other config that is needed such as datasources etc.

Install additional capabilities on an existing server::
It should be possible to add additional functionality to an existing server.

Remove capabilities from an existing server::
It should be possible to remove installed functionality from an existing server.

Offline + Online::
This must be usable in an offline environment with no internet connection.

Staged patching::
It must be possible to stage patches while a server is running, so they can be applied on server start. This is a Wildfly
specific requirement.

Existing build capabilities::
It must meet the needs of the build process for Wildfly Core, Wildfly and Swarm that are currently provided by the
existing feature pack system.

Easily patch product + community (all capabilities)::
It must be possible to patch software that is managed by the provisioning tool.

Keep a history of all changes::
The provisioning tool must keep a full history and allow the server to be rolled back to any previous state.

User created streams::
A end users should be able to create their own streams and install them on a server instance.

Layered products can provide independent streams::
Layered products can provide their own update stream that can be updated independently of the base version.

Layered products can override Wildfly::
It should be possible for a layered product to modify and override the base installation.

Layered products can be uninstalled::
It should be possible to remove a layered product and go back to the base installation.

Installation diff::
It should be possible to view any modification that have been made to the provisioned server.

Detailed installation info::
It must be possible to get a detailed report on exactly what features are installed, including the current version of
all features.

Zip overlay support::
It must be possible to install a layered product using an overlay zip, that is extracted over an existing installation.

Current FS::
TODO: I can't remember what this requirement actually means

Isolated stream MD files::
Stream metadata should be independent.

=== Optional Requirements

RPM Support::
It should be possible to easily turn packages into RPM files.

=== Non Requirements

Multi host patching::
Domain mode 'pull' based patching is not a requirement.

Invalidate Jars::
Jar invalidation by corrupting old versions of jars is not a requirement.

Migration::
This is not a migration tool, migration will be handled by our existing migration tooling.

Runtime patching::
It is not a requirement for a server to be updated while it is still running.

== Design Overview

The solution described here is based around the concept of 'repeatable provisioning'. In essence for every piece of provisioned
software there will existing a `provisioned-state.xml` file that describes the current state of the server as provisioned.
Given nothing but this state file the provisioning tool can provision a new server with the same configuration.

There are four main components to this system:

The provisioned state file `provisioned-state.xml`::
This represents the current state of the provisioned software.

The provisioning file `provisioning.xml`::
This represents the new desired state of the provisioned software.

The provisioning tool::
This tool is responsible for provisioning and modifying servers based on the contents of the provisioning file. It can
also be used as a CLI interface to make changes to the provisioning file, query server state and perform all provisioning
related operations.

Feature packs::
These work in a similar matter to our existing feature packs, however the format will be different as described below.

.A note on server state
[NOTE]
Note that the `provisioning-state.xml` file only knows about server state that was applied through the provisioning tool.
If manual changes are made to the config they will not be reflected in the server state. It will be possible to provide
configuration and deployment information in the provision file so it will be possible to provision a fully configured
server.

=== Use cases

There are four main use cases that have been identified for this tool:

Management of a traditional server installation::
In this use case the provisioning tool eventually takes over the role of the current patching tool. It allows administrators
to keep their server installation up to date, as well as install additional features.

Provisioning of containers / cloud nodes / microservices::
In this use case all (or almost all) server config is provided in the provisioning file (including deployments), which
is then used to provision a new server whenever a new node, VM or container is spun up. Persistent updates to
configuration are done by modifying the provisioning file, and then spinning up new nodes with the new configuration.

Provisioning a configured server for testing::
This will allow developers to easily test their project via arquillian by allowing their build process to easily provision
a fully configured server to run the tests against.

Build Wildfly and downstream features::
The provisioning tooling must be able to generate a provisioned server as part of the Wildfly build proccess, and must
also be usable by downstream products to do the same.

=== Terminology
Installation::
An instance of provisioned software on the file system.

Feature Pack::
A collection of packages, metadata. Automatic installation of packages when added, using specified default groups. Dependencies can be placed on other feature packs, and package overrides are allowed. Package names are namespaced to the feature pack, unless a namespace is explicitly specified. Packs are versioned and identified by a maven GAV. Possibly needs a new name.

One-off Feature Pack::
A feature pack which is applicable to an explicit version of a base feature pack. Once the base feature pack is updated to a newer version the one-off feature pack is archived in the history and its specification is no longer effective in the current installation.

Fat Feature Pack::
A feature pack which includes all artifacts necessary to provision the server. (Might instead just require a local maven repo, that we provide as a zip)

Package::
a named set of files, metadata, scripted actions (CLI commands), dependencies on other packages. Elements potentially remotely referenceable.
 * Files must not conflict with files from other installed packages.
 * Dynamic base locations for each file
 * Minimal atomic unit
 * Mappable to an RPM
 * Example Mapping
  - Every extension a package (e.g ee, ejb, undertow, weld javamail, hibernate-search)
  - Close to 1:1 module - package (who owns module.xml)

Group::
A logical name which maps to a set of packages or groups. Modeled itself as a special package.
     * ee-full (undertow-subsystem, jberet, â€¦)
     * clustering (infinispan, jgroups, mod_cluster)
     * ee-full-ha (ee-full, clustering)
     * legacy (sar, mc, ..)

Default Group(s)::
A list of groups that should be provisioned when the feature pack is added to the installation, unless the provisioning file has explicitly specified the groups to provision. In other words, the defaults are ignored when a provisioning file specifies a set of groups to provision.

Provisioning File::
A configuration specifying the desired state of installation. Lists the feature-packs to be installed, and other configuration such as exclusions, group selection, custom overides, and extra tasks. Can be used as a repeatable provisioning description (can be ran on other systems to produce the same exact installation)

Server State::
Represents the current provisioned state of the installation.

History::
A record of previous server states, which can be used to revert the server to a previous state (atomically).

Universe Artifact::
An artifact with a list of known feature packs, with additional metadata necessary for discovery. Also located by a maven GAV.

== Feature packs

The feature packs described by this document work in a similar manner to our existing feature packs, however they are not
backwards compatible. The feature packs consumed by the provisioning tool contain more metadata than is currently provided,
and will be less Wildfly specific. In general any features that are needed exclusively for Wildfly or related downstream
projects will be implemented as plug ins.

Feature packs contain the following information:

A maven GAV identifier::
This provides the feature packs unique identifier.

A set of dependencies::
Feature packs can depend on other feature packs.

A set of packages::
See the description below for a complete definition of what comprises a package.

A set of default packages::
The default packages are the packages that will be installed by default if the user does not explicitly configure the
installed packages. This allows feature packs to provide optional features that are not installed by default.


Most of the content in a feature pack is contained in packages. Packages contain the following information:

A package identifier::
The identifier is of the following format feature-pack-group-id:feature-pack-id:package-name.
In most circumstances the feature pack name and group are inferred from the containing feature pack. It is possible
to explicitly define this however, which allows a package to override a package in a dependent feature pack. For example
the `org.wildfly.core:wildfly-core` feature pack may provide a package called `io.undertow.core`, which would be translated
to `org.wildfly.core:wildfly-core:io.undertow.core`.

A possibly empty set of files::
This makes up the actual content that gets deployed to disk by the provisioning tool.

A possibly empty set of installation tasks::
These are tasks that are run after the installation. These tasks are designed to be pluggable. In particular it is
possible that a feature packs file set contains the tasks that should be run. In order to allow simple mapping to
RPN these tasks will be standalone executables, rather than code that is loaded into the package managers process.

== Patching and streams

A stream is considered to be all feature with the same group and artifact that meet a particular stream policy. For
example The EAP 7.1.x Final stream would be all EAP 7.1.x feature packs that have the .Final qualifier. The default
stream policy will be set in the feature pack, however it will be possible to override it.

When running update with the provisiong tool it will only look for new artifacts that meet the stream policy. This means
that the provisioning tool will not update between major versions unless it is explicitly told to (this is not a supported
use case).

== Implementation Details

=== Updating an existing server

Updates are performed by conceptually doing the following process (note that this is a conceptual representation only):

Build the current server state::
The tool will examine the current server state, and using the feature packs for the current state determine the pristine
provisioned state.

Builder the new expected server state::
The tool will examine the desired server state, download (or otherwise aquire) any needed feature packs and other artifacts,
and build a model of what is to be provisioned.

Save the current server state to the history::
The history allows provisioning operations to be undone. As well as saving the current server state file it should also
backup configuration and other relevant files. Any files that can simply be repositioned from a feature pack will not be
copied to history.

Change the installation to match the expected state::
In general this will mostly involve simply installing files from the new feature packs, and removing any files that are
no longer required. This may also involve the execution of post installation tasks, which may modify configuration.

=== Dependent feature pack handling

When feature packs specify a dependency on another feature pack they must specify the full GAV. If the dependent feature
pack is not explicitly listed in the provisioning file then whatever dependency version was listed in the feature pack
will be installed. If a provisiong file explicitly lists the dependency version then it will always be used.

It will also be possible to explicitly specify a minimum version of a dependent feature pack. This allows you to force
the upgrade of a dependency, without tying it to a specific version. In this case the version that will be used is the
higher of the listed minimum version and the version that is specified in the feature pack.

=== Staged Patching

It must be possible to support staged patching. This means the patch is applied to the point where it can be determined
if it has succeeded or failed, and then it is actually made live on next server restart. It may be possible to use this
facility to allow distributions to produce overlay zips that are compatible with the provisioning tool. Eventually the
overlay file would contain a staged patch, and on server start the staged patch would be applied.

=== Dependency resolution strategy

TODO: the dependency resolution strategy must be documented, as it forms an important contract for repeatable
provisioning.

== Repository Implementation

This tool does not require any new repository system or infrastructure, it is based around standard maven repositories.
The underlying provisioning files always identify artifacts by a full GAV identifier to ensure repeatable builds. The
provisioning tool will allow the use of just group and artifact for some commands, which allows the provisiong tool to
automatically look up the most up to date version.

=== Software Universe

A universe is list of software that can be provisioned. For example the JBoss community universe would contain all
software that can be installed through the provisioning tool. The idea of the universe is to allow users to easily
discover what software is available. It is not core functionality of the provisioning tool, but rather allows
convenience feature such as `search` and tab completion to work.

At its core a universe is identified by a maven group and artifact combination (e.g. `org.jboss.universe:jboss-universe`).
The tool will use the maven metadata publishing in the maven repository to make sure it always obtains the latest version
of the universe artifact.

This artifact is simple a jar file that contains some XML metadata about the available software, including the name,
description and the maven group and artifact id under which it is published (but not version information, the tool
will always connect to the repository directly in order to ascertain which is the latest version).

== Example Tool Usage

.Add a universe
----
pm universe add org.jboss.universe:universe
----

(this universe is installed by default, but this command can install other universes. The list of available universes is maintained in a hidden file in the user's home dir)

.Work with the universe
----
`pm universe list <optional id>`
pm search eap

>org.jboss:eap-7.1 dependency core-2.2
>org.jboss:eap-7.2
>org.jboss:eap-7.3
----

.Install some packages
----
pm install --update eap-7.1 myeap-7.1 # Grab 7.1.1.GA (latest) core (latest)
pm install eap-7.1 myeap-7.1 # Grab 7.1.1.GA (latest) core (original)

pm install eap-7.1 --version 7.1.0.GA myeap-7.1 # Grab 7.1.0.GA core (original)

pm install eap-7.1 --update --version 7.1.0.GA myeap-7.1 # Grab 7.1.0.GA core (latet)
----

.Update an installation
----
cd myeap-7.1

pm update --stage # Updates provisioning file, no server modifications on all streams
pm apply # Perhaps server modifications specified in file
pm unstage # restore the provisioning file to the last log entry

pm update core [--stage]# only update core feature-pack
pm update eap-7.1 [--stage]#  update core and eap (dependency)
pm update --exclusive eap-7.1 # update eap only

pm log # displays update log
pm restore <change-id> # changes provisioning file to that in change id, without resetting history
pm reset <change-id> # changes provisioning file to that change in id, and deletes all history after id

pm update core --version 1.1.0.Final
----


.Modify the installed groups and packages
----
pm group list # display all groups
pm group add extra-stuff # adds extra-stuff to provisioning file, and installs files
pm group remove extra-stuff

pm package list
pm package remove --dependents low-level-package
pm package add extra-package # depends on low-level-package
pm package add low-level-package
----

.Add a new feature pack to an existing installation
----
pm install weld-experimental
pm uninstall weld-experimental
----

----
# Remove all packages installed in the eap-7.1 feature pack, and install original packages that were overridden,
pm uninstall eap-7.1

pm report

pm create-docker-image /images/F21.img
pm depoy-openshift
----


== RPM

A soft requirement is that it should be possible to build RPM's out of the feature packs, and allow the user to install
via RPM. RPM support will be somewhat more limited, as it will only be possible to install a single server instance via
RPM.
